apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "smtp-relay.fullname" . }}
  labels:
    {{- include "smtp-relay.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "smtp-relay.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "smtp-relay.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "smtp-relay.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: config-init
          image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
          imagePullPolicy: {{ .Values.initContainer.image.pullPolicy }}
          command: ["/bin/sh"]
          args:
            - -c
            - |
              set -e
              echo "Starting configuration merge..."

              # Copy base config
              cp /config/base-config.yml /data/config.yml

              {{- if .Values.secrets.appRegistration.enabled }}
              # Merge Azure App Registration details
              echo "Merging app registration details..."
              {{- if .Values.secrets.appRegistration.useSecretProviderClass }}
              # Read from CSI volume files
              TENANT=$(cat {{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}/{{ .Values.secrets.appRegistration.secretProviderClass.tenantFile }})
              APP_ID=$(cat {{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}/{{ .Values.secrets.appRegistration.secretProviderClass.appIdFile }})
              CERT_THUMBPRINT=$(cat {{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}/{{ .Values.secrets.appRegistration.secretProviderClass.certificateThumbprintFile }})
              CERT_KEY=$(cat {{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}/{{ .Values.secrets.appRegistration.secretProviderClass.certificateKeyFile }})
              {{- if .Values.secrets.appRegistration.secretProviderClass.clientSecretFile }}
              if [ -f "{{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}/{{ .Values.secrets.appRegistration.secretProviderClass.clientSecretFile }}" ]; then
                CLIENT_SECRET=$(cat {{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}/{{ .Values.secrets.appRegistration.secretProviderClass.clientSecretFile }})
              fi
              {{- end }}
              {{- if .Values.secrets.appRegistration.secretProviderClass.forceMailboxFile }}
              if [ -f "{{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}/{{ .Values.secrets.appRegistration.secretProviderClass.forceMailboxFile }}" ]; then
                FORCE_MAILBOX=$(cat {{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}/{{ .Values.secrets.appRegistration.secretProviderClass.forceMailboxFile }})
              fi
              {{- end }}
              {{- end }}
              yq eval -i '.send.appReg.tenant = strenv(TENANT)' /data/config.yml
              yq eval -i '.send.appReg.id = strenv(APP_ID)' /data/config.yml
              yq eval -i '.send.appReg.certificate.thumbprint = strenv(CERT_THUMBPRINT)' /data/config.yml

              # Write certificate key to file
              echo "$CERT_KEY" > /data/secrets/client.key
              chmod 444 /data/secrets/client.key

              {{- if or .Values.secrets.appRegistration.clientSecretKey .Values.secrets.appRegistration.secretProviderClass.clientSecretFile }}
              # Use client secret instead of certificate if provided
              if [ ! -z "$CLIENT_SECRET" ]; then
                yq eval -i '.send.appReg.secret = strenv(CLIENT_SECRET)' /data/config.yml
                yq eval -i 'del(.send.appReg.certificate)' /data/config.yml
              fi
              {{- end }}

              {{- if or .Values.secrets.appRegistration.forceMailboxKey .Values.secrets.appRegistration.secretProviderClass.forceMailboxFile }}
              if [ ! -z "$FORCE_MAILBOX" ]; then
                yq eval -i '.send.forceMailbox = strenv(FORCE_MAILBOX)' /data/config.yml
              fi
              {{- end }}
              {{- end }}

              {{- if .Values.secrets.smtpUsers.enabled }}
              # Merge SMTP users from secret
              echo "Merging SMTP users..."
              {{- if .Values.secrets.smtpUsers.useSecretProviderClass }}
              # Read from CSI volume file
              SMTP_USERS=$(cat {{ .Values.secrets.smtpUsers.secretProviderClass.mountPath }}/{{ .Values.secrets.smtpUsers.secretProviderClass.usersFile }})
              {{- end }}
              echo "$SMTP_USERS" > /tmp/users.json
              yq eval -i '.receive.users = load("/tmp/users.json")' /data/config.yml
              {{- end }}

              {{- if .Values.secrets.tls.enabled }}
              # Copy TLS certificates
              echo "Setting up TLS certificates..."
              {{- if .Values.secrets.tls.useSecretProviderClass }}
              # Copy from CSI volume
              cp {{ .Values.secrets.tls.secretProviderClass.mountPath }}/{{ .Values.secrets.tls.secretProviderClass.certFile }} /data/tls/tls.crt
              cp {{ .Values.secrets.tls.secretProviderClass.mountPath }}/{{ .Values.secrets.tls.secretProviderClass.keyFile }} /data/tls/tls.key
              {{- else }}
              # Copy from Kubernetes secret volume
              cp /tls-secret/tls.crt /data/tls/tls.crt
              cp /tls-secret/tls.key /data/tls/tls.key
              {{- end }}
              chmod -R 444 /data/tls/
              {{- end }}

              echo "Configuration merge complete!"
              cat /data/config.yml
          env:
            {{- if and .Values.secrets.appRegistration.enabled (not .Values.secrets.appRegistration.useSecretProviderClass) }}
            - name: TENANT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.appRegistration.secretName }}
                  key: {{ .Values.secrets.appRegistration.tenantKey }}
            - name: APP_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.appRegistration.secretName }}
                  key: {{ .Values.secrets.appRegistration.appIdKey }}
            - name: CERT_THUMBPRINT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.appRegistration.secretName }}
                  key: {{ .Values.secrets.appRegistration.certificateThumbprintKey }}
            - name: CERT_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.appRegistration.secretName }}
                  key: {{ .Values.secrets.appRegistration.certificateKeyKey }}
            {{- if .Values.secrets.appRegistration.clientSecretKey }}
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.appRegistration.secretName }}
                  key: {{ .Values.secrets.appRegistration.clientSecretKey }}
                  optional: true
            {{- end }}
            {{- if .Values.secrets.appRegistration.forceMailboxKey }}
            - name: FORCE_MAILBOX
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.appRegistration.secretName }}
                  key: {{ .Values.secrets.appRegistration.forceMailboxKey }}
                  optional: true
            {{- end }}
            {{- end }}
            {{- if and .Values.secrets.smtpUsers.enabled (not .Values.secrets.smtpUsers.useSecretProviderClass) }}
            - name: SMTP_USERS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.smtpUsers.secretName }}
                  key: {{ .Values.secrets.smtpUsers.key }}
            {{- end }}
          volumeMounts:
            - name: base-config
              mountPath: /config
            - name: data
              mountPath: /data
            {{- if and .Values.secrets.appRegistration.enabled .Values.secrets.appRegistration.useSecretProviderClass }}
            - name: appreg-secrets
              mountPath: {{ .Values.secrets.appRegistration.secretProviderClass.mountPath }}
              readOnly: true
            {{- end }}
            {{- if and .Values.secrets.smtpUsers.enabled .Values.secrets.smtpUsers.useSecretProviderClass }}
            - name: users-secrets
              mountPath: {{ .Values.secrets.smtpUsers.secretProviderClass.mountPath }}
              readOnly: true
            {{- end }}
            {{- if and .Values.secrets.tls.enabled .Values.secrets.tls.useSecretProviderClass }}
            - name: tls-secrets
              mountPath: {{ .Values.secrets.tls.secretProviderClass.mountPath }}
              readOnly: true
            {{- end }}
            {{- if and .Values.secrets.tls.enabled (not .Values.secrets.tls.useSecretProviderClass) }}
            - name: tls-secret
              mountPath: /tls-secret
              readOnly: true
            {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: smtp
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: base-config
          configMap:
            name: {{ include "smtp-relay.fullname" . }}
        - name: data
          emptyDir: {}
        {{- if and .Values.secrets.appRegistration.enabled .Values.secrets.appRegistration.useSecretProviderClass }}
        - name: appreg-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.secrets.appRegistration.secretProviderClass.name }}
        {{- end }}
        {{- if and .Values.secrets.smtpUsers.enabled .Values.secrets.smtpUsers.useSecretProviderClass }}
        - name: users-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.secrets.smtpUsers.secretProviderClass.name }}
        {{- end }}
        {{- if and .Values.secrets.tls.enabled .Values.secrets.tls.useSecretProviderClass }}
        - name: tls-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.secrets.tls.secretProviderClass.name }}
        {{- end }}
        {{- if and .Values.secrets.tls.enabled (not .Values.secrets.tls.useSecretProviderClass) }}
        - name: tls-secret
          secret:
            secretName: {{ .Values.secrets.tls.secretName }}
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
