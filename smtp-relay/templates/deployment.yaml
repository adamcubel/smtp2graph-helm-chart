apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "smtp-relay.fullname" . }}
  labels:
    {{- include "smtp-relay.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "smtp-relay.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "smtp-relay.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "smtp-relay.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: config-init
          image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
          imagePullPolicy: {{ .Values.initContainer.image.pullPolicy }}
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "Starting configuration merge..."

              # Create directories
              mkdir -p /data/secrets
              mkdir -p /data/tls

              # Copy base config
              cp /config/base-config.yml /data/config.yml

              {{- if .Values.secrets.appRegistration.enabled }}
              # Merge Azure App Registration details
              echo "Merging app registration details..."
              export TENANT=$(cat /secrets/app-registration/{{ .Values.secrets.appRegistration.tenantKey }})
              export APP_ID=$(cat /secrets/app-registration/{{ .Values.secrets.appRegistration.appIdKey }})
              export CERT_THUMBPRINT=$(cat /secrets/app-registration/{{ .Values.secrets.appRegistration.certificateThumbprintKey }})

              yq eval -i '.send.appReg.tenant = strenv(TENANT)' /data/config.yml
              yq eval -i '.send.appReg.id = strenv(APP_ID)' /data/config.yml
              yq eval -i '.send.appReg.certificate.thumbprint = strenv(CERT_THUMBPRINT)' /data/config.yml
              yq eval -i '.send.appReg.certificate.privateKeyPath = "/data/secrets/client.key"' /data/config.yml

              # Copy certificate key to file
              cp /secrets/app-registration/{{ .Values.secrets.appRegistration.certificateKeyKey }} /data/secrets/client.key

              {{- if .Values.secrets.appRegistration.clientSecretKey }}
              # Use client secret instead of certificate if provided
              if [ -f "/secrets/app-registration/{{ .Values.secrets.appRegistration.clientSecretKey }}" ]; then
                export CLIENT_SECRET=$(cat /secrets/app-registration/{{ .Values.secrets.appRegistration.clientSecretKey }})
                yq eval -i '.send.appReg.secret = strenv(CLIENT_SECRET)' /data/config.yml
                yq eval -i 'del(.send.appReg.certificate)' /data/config.yml
              fi
              {{- end }}

              {{- if .Values.secrets.appRegistration.forceMailboxKey }}
              if [ -f "/secrets/app-registration/{{ .Values.secrets.appRegistration.forceMailboxKey }}" ]; then
                export FORCE_MAILBOX=$(cat /secrets/app-registration/{{ .Values.secrets.appRegistration.forceMailboxKey }})
                yq eval -i '.send.forceMailbox = strenv(FORCE_MAILBOX)' /data/config.yml
              fi
              {{- end }}
              {{- end }}

              {{- if .Values.secrets.smtpUsers.enabled }}
              # Merge SMTP users from secret
              echo "Merging SMTP users..."
              yq -p=json -o=yaml /secrets/smtp-users/{{ .Values.secrets.smtpUsers.key }} > /tmp/users.yaml
              yq eval -i '.receive.users = load("/tmp/users.yaml")' /data/config.yml
              {{- end }}

              echo "Configuration merge complete!"
              cat /data/config.yml
          volumeMounts:
            - name: base-config
              mountPath: /config
            - name: data
              mountPath: /data
            {{- if .Values.secrets.appRegistration.enabled }}
            - name: app-registration-secret
              mountPath: /secrets/app-registration
              readOnly: true
            {{- end }}
            {{- if .Values.secrets.smtpUsers.enabled }}
            - name: smtp-users-secret
              mountPath: /secrets/smtp-users
              readOnly: true
            {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: smtp
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            {{- if .Values.secrets.tls.enabled }}
            - name: tls-secret
              mountPath: /data/tls
              readOnly: true
            {{- end }}
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: base-config
          configMap:
            name: {{ include "smtp-relay.fullname" . }}
        - name: data
          emptyDir: {}
        {{- if .Values.secrets.tls.enabled }}
        - name: tls-secret
          secret:
            secretName: {{ .Values.secrets.tls.secretName }}
        {{- end }}
        {{- if .Values.secrets.appRegistration.enabled }}
        - name: app-registration-secret
          secret:
            secretName: {{ .Values.secrets.appRegistration.secretName }}
        {{- end }}
        {{- if .Values.secrets.smtpUsers.enabled }}
        - name: smtp-users-secret
          secret:
            secretName: {{ .Values.secrets.smtpUsers.secretName }}
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
