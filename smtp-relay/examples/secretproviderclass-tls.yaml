# Example: SecretProviderClass for TLS Certificates
# This uses Google Cloud Secret Manager with the Secrets Store CSI Driver

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: smtp2graph-tls-spc
  namespace: default  # Change to your namespace
spec:
  provider: gcp
  parameters:
    # TLS certificate and private key
    secrets: |
      - resourceName: "projects/YOUR_PROJECT_ID/secrets/smtp2graph-tls-cert/versions/latest"
        fileName: "tls.crt"
      - resourceName: "projects/YOUR_PROJECT_ID/secrets/smtp2graph-tls-key/versions/latest"
        fileName: "tls.key"

---
# How to create TLS secrets in Google Secret Manager:

# 1. Create secrets from your certificate files
# gcloud secrets create smtp2graph-tls-cert --data-file=./server.crt
# gcloud secrets create smtp2graph-tls-key --data-file=./server.key

# 2. Grant access to your Kubernetes service account
# gcloud secrets add-iam-policy-binding smtp2graph-tls-cert \
#   --member="serviceAccount:YOUR_PROJECT_ID.svc.id.goog[default/smtp-relay]" \
#   --role="roles/secretmanager.secretAccessor"

# gcloud secrets add-iam-policy-binding smtp2graph-tls-key \
#   --member="serviceAccount:YOUR_PROJECT_ID.svc.id.goog[default/smtp-relay]" \
#   --role="roles/secretmanager.secretAccessor"

---
# Alternative: Using Parameter Manager

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: smtp2graph-tls-spc-pm
  namespace: default
spec:
  provider: gcp
  parameters:
    secrets: |
      - resourceName: "projects/YOUR_PROJECT_ID/locations/YOUR_REGION/parameters/smtp2graph-tls-cert"
        fileName: "tls.crt"
      - resourceName: "projects/YOUR_PROJECT_ID/locations/YOUR_REGION/parameters/smtp2graph-tls-key"
        fileName: "tls.key"

---
# values.yaml configuration to use this SecretProviderClass:

# config:
#   receive:
#     secure: true  # Enable TLS

# secrets:
#   tls:
#     enabled: true
#     useSecretProviderClass: true
#     secretProviderClass:
#       name: "smtp2graph-tls-spc"
#       mountPath: "/mnt/secrets-store/tls"
#       certFile: "tls.crt"
#       keyFile: "tls.key"

---
# Generate a self-signed certificate for testing (NOT for production):

# openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt \
#   -days 365 -nodes -subj "/CN=smtp.example.com"

# Then upload to Secret Manager:
# gcloud secrets create smtp2graph-tls-cert --data-file=./server.crt
# gcloud secrets create smtp2graph-tls-key --data-file=./server.key
