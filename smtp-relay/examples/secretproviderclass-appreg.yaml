# Example: SecretProviderClass for Azure App Registration Secrets
# This uses Google Cloud Secret Manager with the Secrets Store CSI Driver
#
# Prerequisites:
# 1. Secrets Store CSI Driver installed in your GKE cluster
# 2. Workload Identity configured for your service account
# 3. Secrets created in Google Secret Manager
# 4. IAM permissions granted to access the secrets

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: smtp2graph-appreg-spc
  namespace: default  # Change to your namespace
spec:
  provider: gcp
  parameters:
    # List of secrets to mount from Google Secret Manager
    secrets: |
      - resourceName: "projects/YOUR_PROJECT_ID/secrets/smtp2graph-tenant/versions/latest"
        fileName: "tenant"
      - resourceName: "projects/YOUR_PROJECT_ID/secrets/smtp2graph-app-id/versions/latest"
        fileName: "appId"
      - resourceName: "projects/YOUR_PROJECT_ID/secrets/smtp2graph-cert-thumbprint/versions/latest"
        fileName: "certificateThumbprint"
      - resourceName: "projects/YOUR_PROJECT_ID/secrets/smtp2graph-cert-key/versions/latest"
        fileName: "certificateKey"
      # Optional: If using client secret instead of certificate
      # - resourceName: "projects/YOUR_PROJECT_ID/secrets/smtp2graph-client-secret/versions/latest"
      #   fileName: "clientSecret"
      # Optional: Force mailbox
      # - resourceName: "projects/YOUR_PROJECT_ID/secrets/smtp2graph-force-mailbox/versions/latest"
      #   fileName: "forceMailbox"

---
# Alternative: Using Parameter Manager
# If you're using Google Cloud Parameter Manager instead of Secret Manager directly

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: smtp2graph-appreg-spc-pm
  namespace: default
spec:
  provider: gcp
  parameters:
    # Using Parameter Manager
    secrets: |
      - resourceName: "projects/YOUR_PROJECT_ID/locations/YOUR_REGION/parameters/smtp2graph-tenant"
        fileName: "tenant"
      - resourceName: "projects/YOUR_PROJECT_ID/locations/YOUR_REGION/parameters/smtp2graph-app-id"
        fileName: "appId"
      - resourceName: "projects/YOUR_PROJECT_ID/locations/YOUR_REGION/parameters/smtp2graph-cert-thumbprint"
        fileName: "certificateThumbprint"
      - resourceName: "projects/YOUR_PROJECT_ID/locations/YOUR_REGION/parameters/smtp2graph-cert-key"
        fileName: "certificateKey"

---
# How to create secrets in Google Secret Manager:

# 1. Create secrets
# gcloud secrets create smtp2graph-tenant --data-file=- <<EOF
# your-tenant-name
# EOF

# gcloud secrets create smtp2graph-app-id --data-file=- <<EOF
# 01234567-89ab-cdef-0123-456789abcdef
# EOF

# gcloud secrets create smtp2graph-cert-thumbprint --data-file=- <<EOF
# 0123456789ABCDEF0123456789ABCDEF01234567
# EOF

# gcloud secrets create smtp2graph-cert-key --data-file=./client.key

# 2. Grant IAM permissions to your Kubernetes service account
# gcloud secrets add-iam-policy-binding smtp2graph-tenant \
#   --member="serviceAccount:YOUR_PROJECT_ID.svc.id.goog[default/smtp-relay]" \
#   --role="roles/secretmanager.secretAccessor"

# Repeat for each secret

# 3. Configure Workload Identity
# kubectl annotate serviceaccount smtp-relay \
#   iam.gke.io/gcp-service-account=YOUR_GSA@YOUR_PROJECT_ID.iam.gserviceaccount.com

# 4. Bind the Google Service Account to the Kubernetes Service Account
# gcloud iam service-accounts add-iam-policy-binding \
#   YOUR_GSA@YOUR_PROJECT_ID.iam.gserviceaccount.com \
#   --role roles/iam.workloadIdentityUser \
#   --member "serviceAccount:YOUR_PROJECT_ID.svc.id.goog[default/smtp-relay]"

---
# values.yaml configuration to use this SecretProviderClass:

# secrets:
#   appRegistration:
#     enabled: true
#     useSecretProviderClass: true
#     secretProviderClass:
#       name: "smtp2graph-appreg-spc"
#       mountPath: "/mnt/secrets-store/appreg"
#       tenantFile: "tenant"
#       appIdFile: "appId"
#       certificateThumbprintFile: "certificateThumbprint"
#       certificateKeyFile: "certificateKey"
